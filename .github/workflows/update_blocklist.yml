name: update_blocklist

on:
  repository_dispatch:
    types: [update_blocklist]
  workflow_dispatch:              # Manual trigger

permissions:
  contents: write                 # Needed to push changes

concurrency:
  group: update-blocklist
  cancel-in-progress: true

jobs:
  update-blocklist:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      SOURCES_JSON: ${{ vars.SOURCES_JSON }}
      BLOCKLIST_NAME: "Adobe Telemetry Blocklist"
      # (Optionally set MIN_META_WIDTH / MAX_META_WIDTH / MIN_VALUE_WIDTH here)

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1          # Fast; use 0 only if you later need full history

      - name: Show dispatch payload (if repository_dispatch)
        if: ${{ github.event_name == 'repository_dispatch' }}
        run: |
          echo "Received repository_dispatch payload:"
          echo '${{ toJson(github.event.client_payload) }}' > payload.json
          jq '.' payload.json || cat payload.json

      - name: Run update script
        shell: bash
        run: |
          set -euo pipefail
          if [[ -z "${SOURCES_JSON:-}" ]]; then
            echo "ERROR: SOURCES_JSON env not set." >&2
            exit 1
          fi
          echo "$SOURCES_JSON" | jq -e . >/dev/null
          chmod +x scripts/update.sh
          ./scripts/update.sh

      - name: Summarize changed repos from payload (optional)
        if: ${{ github.event_name == 'repository_dispatch' && github.event.client_payload.changed_repos }}
        run: |
          echo "Changed repositories from upstream:"
          echo '${{ toJson(github.event.client_payload.changed_repos) }}' \
            | jq -r '.[] | "\(.owner)/\(.repo)@\(.branch) newCommits=\(.newCommitCount) rewrite=\(.historyRewrite)"'

      - name: Post-generation sanity
        run: |
          echo "=== Workspace root ==="
          ls -al
          echo "=== data/ ==="
          ls -al data || true
          echo "=== Git status (porcelain) ==="
          git status --porcelain || true
          if [[ -f blocklist.lsrules ]]; then
            echo "First 12 lines of blocklist.lsrules:"
            head -n 12 blocklist.lsrules
          else
            echo "blocklist.lsrules NOT FOUND (unexpected)"
          fi
          if [[ -f data/metrics.json ]]; then
            echo "metrics.json summary:"
            jq '{generated_at, total_domains, sources_count: (.sources | length)}' data/metrics.json || true
          else
            echo "metrics.json NOT FOUND (unexpected)"
          fi

      - name: Commit and push changes (if any)
        shell: bash
        env:
          GIT_AUTHOR_NAME: cyber-bot
          GIT_AUTHOR_EMAIL: cyber-bot@users.noreply.github.com
        run: |
          set -euo pipefail

          echo "=== Pre-add git status ==="
          git status --short

          # Detect *any* change (tracked or untracked)
          if ! git status --porcelain | grep -q .; then
            echo "No changes to commit."
            exit 0
          fi

          # Stage everything (new / modified / deletions)
          git add -A

          echo "=== Post-add git status ==="
          git status --short

          git config user.name  "$GIT_AUTHOR_NAME"
          git config user.email "$GIT_AUTHOR_EMAIL"

          TOTAL=$(jq -r '.total_domains // empty' data/metrics.json 2>/dev/null || echo "")
          HASH=$( (sha256sum blocklist.lsrules 2>/dev/null || echo "nohash  -") | awk '{print $1}' )

          if [[ -n "$TOTAL" ]]; then
            SUBJECT="chore(blocklist): update to ${TOTAL} domains"
          else
            SUBJECT="chore(blocklist): update blocklist"
          fi

          {
            echo "$SUBJECT"
            echo
            echo "Generated: $(date -u +'%Y-%m-%dT%H:%M:%SZ') UTC"
            echo "SHA256(blocklist.lsrules)=$HASH"
          } > /tmp/commitmsg

          # If nothing actually staged (edge case), exit gracefully
          if git diff --cached --quiet; then
            echo "Nothing staged after add (unexpected)."
            exit 0
          fi

          git commit -F /tmp/commitmsg || { echo "Commit skipped."; exit 0; }
          git push
